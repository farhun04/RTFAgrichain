{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { contractAddress, abi } from \"./constants\";\nasync function address() {\n  if (typeof window.ethereum !== \"undefined\") {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    console.log(accounts);\n    await provider.send('eth_requestAccounts', []);\n    const signer = provider.getSigner();\n    const m = localStorage.getItem(\"funding\");\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n    try {\n      const transactionResponse = await contract.deposit({\n        value: ethers.utils.parseEther(m)\n      });\n    } catch (error) {\n      console.log(\"Install Metamask\");\n    }\n  }\n  var a = contract.decider();\n}\nexport default address;","map":{"version":3,"names":["ethers","contractAddress","abi","address","window","ethereum","provider","providers","Web3Provider","accounts","send","console","log","signer","getSigner","m","localStorage","getItem","contract","Contract","transactionResponse","deposit","value","utils","parseEther","error","a","decider"],"sources":["C:/Users/moham/OneDrive/Desktop/CryptograpicFarming/cryptographicfarming/src/address.js"],"sourcesContent":["import {ethers} from \"ethers\"\r\nimport { contractAddress,abi } from \"./constants\";\r\n\r\nasync function address() {\r\n  \r\n\r\n  \r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const accounts =  await provider.send(\"eth_requestAccounts\", []);\r\n      console.log(accounts)\r\n      await provider.send('eth_requestAccounts', [])\r\n      const signer = provider.getSigner()\r\n      const m=localStorage.getItem(\"funding\");\r\n      const contract = new ethers.Contract(contractAddress, abi, signer)\r\n      try {\r\n        const transactionResponse = await contract.deposit({value:ethers.utils.parseEther(m)}\r\n        )\r\n        \r\n      } catch (error) {\r\n        console.log(\"Install Metamask\")\r\n      }}\r\n      var a=contract.decider();\r\n    }\r\nexport default address"],"mappings":"AAAA,SAAQA,MAAM,QAAO,QAAQ;AAC7B,SAASC,eAAe,EAACC,GAAG,QAAQ,aAAa;AAEjD,eAAeC,OAAOA,CAAA,EAAG;EAIrB,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC1C,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMI,QAAQ,GAAI,MAAMH,QAAQ,CAACI,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAChEC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,MAAMH,QAAQ,CAACI,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC9C,MAAMG,MAAM,GAAGP,QAAQ,CAACQ,SAAS,CAAC,CAAC;IACnC,MAAMC,CAAC,GAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IACvC,MAAMC,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,QAAQ,CAAClB,eAAe,EAAEC,GAAG,EAAEW,MAAM,CAAC;IAClE,IAAI;MACF,MAAMO,mBAAmB,GAAG,MAAMF,QAAQ,CAACG,OAAO,CAAC;QAACC,KAAK,EAACtB,MAAM,CAACuB,KAAK,CAACC,UAAU,CAACT,CAAC;MAAC,CACpF,CAAC;IAEH,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdd,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC;EAAC;EACD,IAAIc,CAAC,GAACR,QAAQ,CAACS,OAAO,CAAC,CAAC;AAC1B;AACJ,eAAexB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}