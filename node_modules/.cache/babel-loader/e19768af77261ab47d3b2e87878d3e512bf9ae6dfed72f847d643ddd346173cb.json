{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  BucketStateEnum: () => import_core.BucketStateEnum,\n  DomainTypeEnum: () => import_core2.DomainTypeEnum,\n  ProtocolEnum: () => import_core3.ProtocolEnum,\n  SpheronClient: () => SpheronClient,\n  TokenScope: () => import_core3.TokenScope,\n  UploadStatusEnum: () => import_core.UploadStatusEnum,\n  default: () => src_default,\n  ipfs: () => ipfs,\n  uint8arrayToString: () => import_encryption.uint8arrayToString\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/bucket-manager/index.ts\nvar import_core2 = require(\"@spheron/core\");\n\n// src/bucket-manager/interfaces.ts\nvar import_core = require(\"@spheron/core\");\n\n// src/bucket-manager/index.ts\nvar BucketManager = class {\n  constructor(spheronApi) {\n    this.spheronApi = spheronApi;\n  }\n  getOrganizationBuckets(organizationId, options) {\n    return __async(this, null, function* () {\n      const {\n        buckets\n      } = yield this.spheronApi.getOrganizationBuckets(__spreadValues({\n        organizationId\n      }, options));\n      return buckets.map(x => this.mapCoreBucket(x));\n    });\n  }\n  getOrganizationBucketCount(organizationId, options) {\n    return __async(this, null, function* () {\n      const {\n        count\n      } = yield this.spheronApi.getOrganizationBucketCount(__spreadValues({\n        organizationId\n      }, options));\n      return count;\n    });\n  }\n  getBucket(bucketId) {\n    return __async(this, null, function* () {\n      const bucket = yield this.spheronApi.getBucket(bucketId);\n      return this.mapCoreBucket(bucket);\n    });\n  }\n  getBucketDomains(bucketId) {\n    return __async(this, null, function* () {\n      const {\n        domains\n      } = yield this.spheronApi.getBucketDomains(bucketId);\n      return domains.map(x => this.mapCoreBucketDomains(x));\n    });\n  }\n  getBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      const {\n        domain\n      } = yield this.spheronApi.getBucketDomain(bucketId, domainIdentifier);\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  updateBucketDomain(bucketId, domainIdentifier, options) {\n    return __async(this, null, function* () {\n      const {\n        domain\n      } = yield this.spheronApi.patchBucketDomain(bucketId, domainIdentifier, __spreadValues({}, options));\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  verifyBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      const {\n        domain\n      } = yield this.spheronApi.verifyBucketDomain(bucketId, domainIdentifier);\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  deleteBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.deleteBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  addBucketDomain(bucketId, options) {\n    return __async(this, null, function* () {\n      const {\n        domain\n      } = yield this.spheronApi.addBucketDomain(bucketId, __spreadValues({}, options));\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  getBucketUploads(bucketId, options) {\n    return __async(this, null, function* () {\n      if (options.skip < 0 || options.limit < 0) {\n        throw new Error(`Skip and Limit cannot be negative numbers.`);\n      }\n      const {\n        uploads\n      } = yield this.spheronApi.getBucketUploads(bucketId, {\n        skip: options.skip && options.skip >= 0 ? options.skip : 0,\n        limit: options.limit && options.limit >= 0 ? options.limit : 6\n      });\n      return uploads.map(x => this.mapCoreUpload(x));\n    });\n  }\n  getBucketUploadCount(bucketId) {\n    return __async(this, null, function* () {\n      const {\n        count\n      } = yield this.spheronApi.getBucketUploadCount(bucketId);\n      return count;\n    });\n  }\n  archiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.updateBucketState(bucketId, import_core.BucketStateEnum.ARCHIVED);\n    });\n  }\n  unarchiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.updateBucketState(bucketId, import_core.BucketStateEnum.MAINTAINED);\n    });\n  }\n  getUpload(uploadId) {\n    return __async(this, null, function* () {\n      const upload = yield this.spheronApi.getUpload(uploadId);\n      return this.mapCoreUpload(upload);\n    });\n  }\n  getBucketIpnsRecords(bucketId) {\n    return __async(this, null, function* () {\n      const {\n        ipnsRecords\n      } = yield this.spheronApi.getBucketIpnsRecords(bucketId);\n      return ipnsRecords.map(x => this.mapCoreIpnsRecord(x));\n    });\n  }\n  getBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      const {\n        ipnsRecord\n      } = yield this.spheronApi.getBucketIpnsRecord(bucketId, ipnsRecordId);\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  addBucketIpnsRecord(bucketId, uploadId) {\n    return __async(this, null, function* () {\n      const {\n        ipnsRecord\n      } = yield this.spheronApi.addBucketIpnsRecord(bucketId, uploadId);\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  updateBucketIpnsRecord(bucketId, ipnsRecordId, uploadId) {\n    return __async(this, null, function* () {\n      const {\n        ipnsRecord\n      } = yield this.spheronApi.patchBucketIpnsRecord(bucketId, ipnsRecordId, uploadId);\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  deleteBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.deleteBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  mapCoreBucket(bucket) {\n    return {\n      id: bucket._id,\n      name: bucket.name,\n      organizationId: bucket.organization,\n      state: bucket.state\n    };\n  }\n  mapCoreBucketDomains(domain) {\n    return {\n      id: domain._id,\n      name: domain.name,\n      link: domain.link,\n      verified: domain.verified,\n      bucketId: domain.bucketId,\n      type: domain.type\n    };\n  }\n  mapCoreUpload(upload) {\n    return {\n      id: upload._id,\n      protocolLink: upload.protocolLink,\n      uploadDirectory: upload.uploadDirectory,\n      status: upload.status,\n      memoryUsed: upload.memoryUsed,\n      bucketId: upload.bucket,\n      protocol: upload.protocol\n    };\n  }\n  mapCoreIpnsRecord(ipnsRecord) {\n    return {\n      id: ipnsRecord._id,\n      ipnsHash: ipnsRecord.keyId,\n      ipnsLink: ipnsRecord.ipnsLink,\n      bucketId: ipnsRecord.bucket,\n      createdAt: ipnsRecord.createdAt,\n      updatedAt: ipnsRecord.updatedAt,\n      memoryUsed: ipnsRecord.memoryUsed\n    };\n  }\n};\nvar bucket_manager_default = BucketManager;\n\n// src/index.ts\nvar import_core3 = require(\"@spheron/core\");\n\n// src/fs-payload-creator.ts\nvar import_fs = __toESM(require(\"fs\"));\nvar import_form_data = __toESM(require(\"form-data\"));\nvar import_path = __toESM(require(\"path\"));\nvar createPayloads = (path2, payloadSize) => __async(void 0, null, function* () {\n  const uploadContext = {\n    payloads: new Array(),\n    currentPayload: null,\n    currentPayloadSize: 0,\n    totalSize: 0\n  };\n  yield fillUploadContext(path2, \"./\", uploadContext, true, payloadSize);\n  if (uploadContext.currentPayload) {\n    uploadContext.payloads.push(uploadContext.currentPayload);\n  }\n  return {\n    payloads: uploadContext.payloads,\n    totalSize: uploadContext.totalSize\n  };\n});\nvar fillUploadContext = (pathToFile, rootPath, uploadContext, isRoot, payloadSize) => __async(void 0, null, function* () {\n  const stat = yield import_fs.default.promises.stat(pathToFile);\n  if (stat.isFile()) {\n    const fileName = import_path.default.basename(pathToFile);\n    processFile(pathToFile, rootPath + fileName, stat, uploadContext, payloadSize);\n    return;\n  }\n  const files = yield import_fs.default.promises.readdir(pathToFile);\n  for (const file of files) {\n    yield fillUploadContext(`${pathToFile}/${file}`, isRoot ? \"./\" : `${rootPath}${import_path.default.basename(pathToFile)}/`, uploadContext, false, payloadSize);\n  }\n});\nvar processFile = (fullPath, uploadPath, stat, uploadContext, payloadSize) => __async(void 0, null, function* () {\n  uploadContext.totalSize += stat.size;\n  if (stat.size > payloadSize) {\n    const numOfChunks = Math.ceil(stat.size / payloadSize);\n    for (let i = 0; i < numOfChunks; i++) {\n      const start = i * payloadSize;\n      const end = start + payloadSize - 1;\n      const form = new import_form_data.default();\n      form.append(`chunk-${i}-${numOfChunks}`, import_fs.default.createReadStream(fullPath, {\n        start,\n        end\n      }), {\n        filepath: uploadPath\n      });\n      uploadContext.payloads.push(form);\n    }\n  } else {\n    if (!uploadContext.currentPayload) {\n      uploadContext.currentPayload = new import_form_data.default();\n    }\n    uploadContext.currentPayload.append(\"files\", import_fs.default.createReadStream(fullPath), {\n      filepath: uploadPath\n    });\n    uploadContext.currentPayloadSize += stat.size;\n    if (uploadContext.currentPayloadSize > payloadSize) {\n      uploadContext.payloads.push(uploadContext.currentPayload);\n      uploadContext.currentPayload = null;\n      uploadContext.currentPayloadSize = 0;\n    }\n  }\n});\n\n// src/ipfs.utils.ts\nvar import_cid = require(\"multiformats/cid\");\nvar ipfs = {\n  utils: {\n    toV0: v1 => {\n      const cid = import_cid.CID.parse(v1);\n      if (cid.version === 0) return v1;\n      return cid.toV0().toString();\n    },\n    toV1: v0 => {\n      const cid = import_cid.CID.parse(v0);\n      if (cid.version === 1) return v0;\n      return cid.toV1().toString();\n    }\n  }\n};\n\n// src/index.ts\nvar import_encryption = require(\"@spheron/encryption\");\n\n// src/utils.ts\nvar import_fs2 = __toESM(require(\"fs\"));\nfunction readFileContent(filePath) {\n  return __async(this, null, function* () {\n    const exists = import_fs2.default.promises.access(filePath, import_fs2.default.constants.F_OK);\n    if (!exists) {\n      throw new Error(\"File does not exist.\");\n    }\n    const fileBuffer = yield import_fs2.default.promises.readFile(filePath);\n    const fileContent = new Uint8Array(fileBuffer);\n    return {\n      content: fileContent\n    };\n  });\n}\n\n// src/index.ts\nvar import_form_data2 = __toESM(require(\"form-data\"));\nvar SpheronClient = class extends import_core3.ScopeExtractor {\n  constructor(configuration) {\n    const spheronApi = new import_core3.SpheronApi(configuration.token, configuration == null ? void 0 : configuration.apiUrl);\n    super(spheronApi);\n    this.spheronApi = spheronApi;\n    this.configuration = configuration;\n    this.bucketManager = new bucket_manager_default(this.spheronApi);\n    this.uploadManager = new import_core3.UploadManager(configuration == null ? void 0 : configuration.apiUrl);\n  }\n  upload(path2, configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const {\n        uploadId,\n        payloadSize,\n        parallelUploadCount\n      } = yield this.uploadManager.initiateUpload({\n        protocol: configuration.protocol,\n        name: configuration.name,\n        organizationId: configuration.organizationId,\n        token: this.configuration.token\n      });\n      let success = true;\n      let caughtError = void 0;\n      try {\n        const {\n          payloads,\n          totalSize\n        } = yield createPayloads(path2, payloadSize);\n        configuration.onUploadInitiated && configuration.onUploadInitiated(uploadId);\n        const uploadPayloadsResult = yield this.uploadManager.uploadPayloads(payloads, {\n          uploadId,\n          token: this.configuration.token,\n          parallelUploadCount,\n          onChunkUploaded: uploadedSize => configuration.onChunkUploaded && configuration.onChunkUploaded(uploadedSize, totalSize)\n        });\n        if (!uploadPayloadsResult.success) {\n          throw new Error(uploadPayloadsResult.errorMessage);\n        }\n      } catch (error) {\n        success = false;\n        caughtError = error;\n      }\n      const result = yield this.uploadManager.finalizeUpload(uploadId, success, this.configuration.token);\n      if (caughtError) {\n        throw caughtError;\n      }\n      if (!result.success) {\n        throw new Error(`Upload failed. ${result.message}`);\n      }\n      return {\n        uploadId: result.uploadId,\n        bucketId: result.bucketId,\n        protocolLink: result.protocolLink,\n        dynamicLinks: result.dynamicLinks,\n        cid: result.cid\n      };\n    });\n  }\n  encryptUpload(_0) {\n    return __async(this, arguments, function* ({\n      authSig,\n      sessionSigs,\n      accessControlConditions,\n      evmContractConditions,\n      solRpcConditions,\n      unifiedAccessControlConditions,\n      chain,\n      string,\n      filePath,\n      litNodeClient,\n      configuration\n    }) {\n      yield this.validateStorageOrganizationType();\n      if (!string && !filePath) {\n        throw new Error(`Either string or filePath must be provided`);\n      }\n      if (!configuration.name) {\n        throw new Error(`Name must be provided`);\n      }\n      let dataToEncrypt = null;\n      if (string && filePath) {\n        throw new Error(`Provide only either a string or filePath to encrypt`);\n      } else if (string !== void 0) {\n        dataToEncrypt = (0, import_encryption.uint8arrayFromString)(string, \"utf8\");\n      } else if (filePath !== void 0) {\n        const {\n          content\n        } = yield readFileContent(filePath);\n        dataToEncrypt = content;\n      } else {\n        throw new Error(`Either string or file must be provided`);\n      }\n      if (!dataToEncrypt) {\n        throw new Error(`No data to encrypt`);\n      }\n      const {\n        encryptedData,\n        symmetricKey\n      } = yield (0, import_encryption.encryptData)(dataToEncrypt);\n      const encryptedSymmetricKey = yield litNodeClient.saveEncryptionKey({\n        accessControlConditions,\n        evmContractConditions,\n        solRpcConditions,\n        unifiedAccessControlConditions,\n        symmetricKey,\n        authSig,\n        sessionSigs,\n        chain\n      });\n      const encryptedSymmetricKeyString = (0, import_encryption.uint8arrayToString)(encryptedSymmetricKey, \"base16\");\n      const encryptedDataJson = Buffer.from(encryptedData.buffer).toJSON();\n      try {\n        const uploadJson = JSON.stringify({\n          encryptedData: encryptedDataJson,\n          encryptedSymmetricKeyString,\n          accessControlConditions,\n          evmContractConditions,\n          solRpcConditions,\n          unifiedAccessControlConditions,\n          chain\n        });\n        const {\n          uploadId,\n          parallelUploadCount\n        } = yield this.uploadManager.initiateUpload({\n          protocol: import_core3.ProtocolEnum.IPFS,\n          name: configuration.name,\n          token: this.configuration.token\n        });\n        configuration.onUploadInitiated && configuration.onUploadInitiated(uploadId);\n        let success = true;\n        let caughtError = void 0;\n        const totalSize = Buffer.byteLength(uploadJson, \"utf8\");\n        try {\n          const form = new import_form_data2.default();\n          form.append(\"files\", uploadJson, \"data.json\");\n          const uploadPayloadsResult = yield this.uploadManager.uploadPayloads([form], {\n            uploadId,\n            token: this.configuration.token,\n            parallelUploadCount,\n            onChunkUploaded: uploadedSize => configuration.onChunkUploaded && configuration.onChunkUploaded(uploadedSize, totalSize)\n          });\n          if (!uploadPayloadsResult.success) {\n            throw new Error(uploadPayloadsResult.errorMessage);\n          }\n        } catch (error) {\n          success = false;\n          caughtError = error;\n        }\n        const result = yield this.uploadManager.finalizeUpload(uploadId, success, this.configuration.token);\n        if (caughtError) {\n          throw caughtError;\n        }\n        if (!result.success) {\n          throw new Error(`Upload failed. ${result.message}`);\n        }\n        return {\n          uploadId: result.uploadId,\n          bucketId: result.bucketId,\n          protocolLink: result.protocolLink,\n          dynamicLinks: result.dynamicLinks,\n          cid: result.cid\n        };\n      } catch (e) {\n        throw new Error(`Upload failed: ${e.message}`);\n      }\n    });\n  }\n  decryptUpload(_0) {\n    return __async(this, arguments, function* ({\n      authSig,\n      sessionSigs,\n      ipfsCid,\n      litNodeClient\n    }) {\n      yield this.validateStorageOrganizationType();\n      const metadata = yield (yield fetch(`https://${ipfsCid}.ipfs.sphn.link/data.json`).catch(() => {\n        throw new Error(\"Error finding metadata from IPFS CID\");\n      })).json();\n      const symmetricKey = yield litNodeClient.getEncryptionKey({\n        accessControlConditions: metadata.accessControlConditions,\n        evmContractConditions: metadata.evmContractConditions,\n        solRpcConditions: metadata.solRpcConditions,\n        unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,\n        toDecrypt: metadata.encryptedSymmetricKeyString,\n        chain: metadata.chain,\n        authSig,\n        sessionSigs\n      });\n      const encrypted = new Uint8Array(Buffer.from(metadata.encryptedData));\n      return (0, import_encryption.decryptData)(encrypted, symmetricKey);\n    });\n  }\n  createSingleUploadToken(configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const {\n        singleUseToken\n      } = yield this.uploadManager.initiateUpload({\n        protocol: configuration.protocol,\n        name: configuration.name,\n        token: this.configuration.token,\n        createSingleUseToken: true\n      });\n      return {\n        uploadToken: singleUseToken\n      };\n    });\n  }\n  pinCID(configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.uploadManager.pinCID({\n        name: configuration.name,\n        token: this.configuration.token,\n        cid: configuration.cid\n      });\n    });\n  }\n  getOrganizationBuckets(organizationId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getOrganizationBuckets(organizationId, options);\n    });\n  }\n  getOrganizationBucketCount(organizationId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getOrganizationBucketCount(organizationId, options);\n    });\n  }\n  getBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucket(bucketId);\n    });\n  }\n  getCIDStatus(CID2) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.uploadManager.getCIDStatus(CID2);\n    });\n  }\n  getBucketDomains(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketDomains(bucketId);\n    });\n  }\n  getBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  addBucketDomain(bucketId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.addBucketDomain(bucketId, options);\n    });\n  }\n  updateBucketDomain(bucketId, domainIdentifier, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.updateBucketDomain(bucketId, domainIdentifier, options);\n    });\n  }\n  verifyBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.verifyBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  getCdnDnsRecords() {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const {\n        recordIpv4V2,\n        recordCnameV2\n      } = yield this.spheronApi.getCdnRecords();\n      return {\n        cdnARecords: recordIpv4V2,\n        cdnCnameRecords: recordCnameV2\n      };\n    });\n  }\n  deleteBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.deleteBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  archiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.bucketManager.archiveBucket(bucketId);\n    });\n  }\n  unarchiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.bucketManager.unarchiveBucket(bucketId);\n    });\n  }\n  getBucketUploadCount(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketUploadCount(bucketId);\n    });\n  }\n  getBucketUploads(bucketId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketUploads(bucketId, options);\n    });\n  }\n  getUpload(uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getUpload(uploadId);\n    });\n  }\n  getOrganizationUsage(organizationId) {\n    return __async(this, null, function* () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;\n      yield this.validateStorageOrganizationType();\n      const usage = yield this.spheronApi.getOrganizationUsage(organizationId, \"storage\");\n      return {\n        used: {\n          bandwidth: (_a = usage.usedBandwidth) != null ? _a : 0,\n          storageArweave: (_b = usage.usedStorageArweave) != null ? _b : 0,\n          storageIPFS: (_c = usage.usedStorageIPFS) != null ? _c : 0,\n          storageFilecoin: (_d = usage.usedStorageFilecoin) != null ? _d : 0,\n          domains: (_e = usage.usedDomains) != null ? _e : 0,\n          hnsDomains: (_f = usage.usedHnsDomains) != null ? _f : 0,\n          ensDomains: (_g = usage.usedEnsDomains) != null ? _g : 0,\n          numberOfRequests: (_h = usage.usedNumberOfRequests) != null ? _h : 0,\n          parallelUploads: (_i = usage.usedParallelUploads) != null ? _i : 0,\n          imageOptimization: (_j = usage.usedImageOptimizations) != null ? _j : 0,\n          ipfsBandwidth: (_k = usage.usedIpfsBandwidth) != null ? _k : 0,\n          ipfsNumberOfRequests: (_l = usage.usedIpfsNumberOfRequests) != null ? _l : 0\n        },\n        limit: {\n          bandwidth: (_m = usage.bandwidthLimit) != null ? _m : 0,\n          storageArweave: (_n = usage.storageArweaveLimit) != null ? _n : 0,\n          storageIPFS: (_o = usage.storageIPFSLimit) != null ? _o : 0,\n          domains: (_p = usage.domainsLimit) != null ? _p : 0,\n          hnsDomains: (_q = usage.usedHnsDomains) != null ? _q : 0,\n          ensDomains: (_r = usage.usedEnsDomains) != null ? _r : 0,\n          parallelUploads: (_s = usage.parallelUploadsLimit) != null ? _s : 0,\n          imageOptimization: (_t = usage.imageOptimizationsLimit) != null ? _t : 0,\n          ipfsBandwidth: (_u = usage.ipfsBandwidthLimit) != null ? _u : 0\n        }\n      };\n    });\n  }\n  getTokenScope() {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.getScopeFromToken();\n    });\n  }\n  getBucketIpnsRecords(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketIpnsRecords(bucketId);\n    });\n  }\n  getBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  addBucketIpnsRecord(bucketId, uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.addBucketIpnsRecord(bucketId, uploadId);\n    });\n  }\n  updateBucketIpnsRecord(bucketId, ipnsRecordId, uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.updateBucketIpnsRecord(bucketId, ipnsRecordId, uploadId);\n    });\n  }\n  deleteBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.spheronApi.deleteBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  migrateStaticSiteOrgToStorage(webappOrganizationId, storageOrganizationId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.spheronApi.migrateStaticSiteOrgToStorage(webappOrganizationId, storageOrganizationId);\n    });\n  }\n  validateStorageOrganizationType() {\n    return __async(this, null, function* () {\n      const type = yield this.getOrganizationTypeFromToken();\n      if (type != import_core3.AppTypeEnum.STORAGE) {\n        throw new Error(\"The token used won't work with version >2.0.0 of SDK, please create a new token from your storage organisation.\");\n      }\n    });\n  }\n};\nvar src_default = SpheronClient;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  BucketStateEnum,\n  DomainTypeEnum,\n  ProtocolEnum,\n  SpheronClient,\n  TokenScope,\n  UploadStatusEnum,\n  ipfs,\n  uint8arrayToString\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getOwnPropSymbols","getOwnPropertySymbols","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__export","target","all","name","get","__copyProps","to","from","except","desc","__toESM","mod","isNodeMode","__esModule","__toCommonJS","__async","__this","__arguments","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","throw","x","done","then","apply","src_exports","BucketStateEnum","import_core","DomainTypeEnum","import_core2","ProtocolEnum","import_core3","SpheronClient","TokenScope","UploadStatusEnum","default","src_default","ipfs","uint8arrayToString","import_encryption","module","exports","require","BucketManager","constructor","spheronApi","getOrganizationBuckets","organizationId","options","buckets","map","mapCoreBucket","getOrganizationBucketCount","count","getBucket","bucketId","bucket","getBucketDomains","domains","mapCoreBucketDomains","getBucketDomain","domainIdentifier","domain","updateBucketDomain","patchBucketDomain","verifyBucketDomain","deleteBucketDomain","addBucketDomain","getBucketUploads","skip","limit","Error","uploads","mapCoreUpload","getBucketUploadCount","archiveBucket","updateBucketState","ARCHIVED","unarchiveBucket","MAINTAINED","getUpload","uploadId","upload","getBucketIpnsRecords","ipnsRecords","mapCoreIpnsRecord","getBucketIpnsRecord","ipnsRecordId","ipnsRecord","addBucketIpnsRecord","updateBucketIpnsRecord","patchBucketIpnsRecord","deleteBucketIpnsRecord","id","_id","organization","state","link","verified","type","protocolLink","uploadDirectory","status","memoryUsed","protocol","ipnsHash","keyId","ipnsLink","createdAt","updatedAt","bucket_manager_default","import_fs","import_form_data","import_path","createPayloads","path2","payloadSize","uploadContext","payloads","Array","currentPayload","currentPayloadSize","totalSize","fillUploadContext","push","pathToFile","rootPath","isRoot","stat","promises","isFile","fileName","basename","processFile","files","readdir","file","fullPath","uploadPath","size","numOfChunks","Math","ceil","i","start","end","form","append","createReadStream","filepath","import_cid","utils","toV0","v1","cid","CID","parse","version","toString","toV1","v0","import_fs2","readFileContent","filePath","exists","access","constants","F_OK","fileBuffer","readFile","fileContent","Uint8Array","content","import_form_data2","ScopeExtractor","configuration","SpheronApi","token","apiUrl","bucketManager","uploadManager","UploadManager","validateStorageOrganizationType","parallelUploadCount","initiateUpload","success","caughtError","onUploadInitiated","uploadPayloadsResult","uploadPayloads","onChunkUploaded","uploadedSize","errorMessage","error","result","finalizeUpload","message","dynamicLinks","encryptUpload","_0","arguments","authSig","sessionSigs","accessControlConditions","evmContractConditions","solRpcConditions","unifiedAccessControlConditions","chain","string","litNodeClient","dataToEncrypt","uint8arrayFromString","encryptedData","symmetricKey","encryptData","encryptedSymmetricKey","saveEncryptionKey","encryptedSymmetricKeyString","encryptedDataJson","Buffer","buffer","toJSON","uploadJson","JSON","stringify","IPFS","byteLength","decryptUpload","ipfsCid","metadata","fetch","catch","json","getEncryptionKey","toDecrypt","encrypted","decryptData","createSingleUploadToken","singleUseToken","createSingleUseToken","uploadToken","pinCID","getCIDStatus","CID2","getCdnDnsRecords","recordIpv4V2","recordCnameV2","getCdnRecords","cdnARecords","cdnCnameRecords","getOrganizationUsage","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","usage","used","bandwidth","usedBandwidth","storageArweave","usedStorageArweave","storageIPFS","usedStorageIPFS","storageFilecoin","usedStorageFilecoin","usedDomains","hnsDomains","usedHnsDomains","ensDomains","usedEnsDomains","numberOfRequests","usedNumberOfRequests","parallelUploads","usedParallelUploads","imageOptimization","usedImageOptimizations","ipfsBandwidth","usedIpfsBandwidth","ipfsNumberOfRequests","usedIpfsNumberOfRequests","bandwidthLimit","storageArweaveLimit","storageIPFSLimit","domainsLimit","parallelUploadsLimit","imageOptimizationsLimit","ipfsBandwidthLimit","getTokenScope","getScopeFromToken","migrateStaticSiteOrgToStorage","webappOrganizationId","storageOrganizationId","getOrganizationTypeFromToken","AppTypeEnum","STORAGE"],"sources":["C:/Users/moham/OneDrive/Desktop/CryptograpicFarming/cryptographicfarming/node_modules/@spheron/storage/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  BucketStateEnum: () => import_core.BucketStateEnum,\n  DomainTypeEnum: () => import_core2.DomainTypeEnum,\n  ProtocolEnum: () => import_core3.ProtocolEnum,\n  SpheronClient: () => SpheronClient,\n  TokenScope: () => import_core3.TokenScope,\n  UploadStatusEnum: () => import_core.UploadStatusEnum,\n  default: () => src_default,\n  ipfs: () => ipfs,\n  uint8arrayToString: () => import_encryption.uint8arrayToString\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/bucket-manager/index.ts\nvar import_core2 = require(\"@spheron/core\");\n\n// src/bucket-manager/interfaces.ts\nvar import_core = require(\"@spheron/core\");\n\n// src/bucket-manager/index.ts\nvar BucketManager = class {\n  constructor(spheronApi) {\n    this.spheronApi = spheronApi;\n  }\n  getOrganizationBuckets(organizationId, options) {\n    return __async(this, null, function* () {\n      const { buckets } = yield this.spheronApi.getOrganizationBuckets(__spreadValues({\n        organizationId\n      }, options));\n      return buckets.map((x) => this.mapCoreBucket(x));\n    });\n  }\n  getOrganizationBucketCount(organizationId, options) {\n    return __async(this, null, function* () {\n      const { count } = yield this.spheronApi.getOrganizationBucketCount(__spreadValues({\n        organizationId\n      }, options));\n      return count;\n    });\n  }\n  getBucket(bucketId) {\n    return __async(this, null, function* () {\n      const bucket = yield this.spheronApi.getBucket(bucketId);\n      return this.mapCoreBucket(bucket);\n    });\n  }\n  getBucketDomains(bucketId) {\n    return __async(this, null, function* () {\n      const { domains } = yield this.spheronApi.getBucketDomains(bucketId);\n      return domains.map((x) => this.mapCoreBucketDomains(x));\n    });\n  }\n  getBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      const { domain } = yield this.spheronApi.getBucketDomain(\n        bucketId,\n        domainIdentifier\n      );\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  updateBucketDomain(bucketId, domainIdentifier, options) {\n    return __async(this, null, function* () {\n      const { domain } = yield this.spheronApi.patchBucketDomain(\n        bucketId,\n        domainIdentifier,\n        __spreadValues({}, options)\n      );\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  verifyBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      const { domain } = yield this.spheronApi.verifyBucketDomain(\n        bucketId,\n        domainIdentifier\n      );\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  deleteBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.deleteBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  addBucketDomain(bucketId, options) {\n    return __async(this, null, function* () {\n      const { domain } = yield this.spheronApi.addBucketDomain(bucketId, __spreadValues({}, options));\n      return this.mapCoreBucketDomains(domain);\n    });\n  }\n  getBucketUploads(bucketId, options) {\n    return __async(this, null, function* () {\n      if (options.skip < 0 || options.limit < 0) {\n        throw new Error(`Skip and Limit cannot be negative numbers.`);\n      }\n      const { uploads } = yield this.spheronApi.getBucketUploads(bucketId, {\n        skip: options.skip && options.skip >= 0 ? options.skip : 0,\n        limit: options.limit && options.limit >= 0 ? options.limit : 6\n      });\n      return uploads.map((x) => this.mapCoreUpload(x));\n    });\n  }\n  getBucketUploadCount(bucketId) {\n    return __async(this, null, function* () {\n      const { count } = yield this.spheronApi.getBucketUploadCount(bucketId);\n      return count;\n    });\n  }\n  archiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.updateBucketState(bucketId, import_core.BucketStateEnum.ARCHIVED);\n    });\n  }\n  unarchiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.updateBucketState(\n        bucketId,\n        import_core.BucketStateEnum.MAINTAINED\n      );\n    });\n  }\n  getUpload(uploadId) {\n    return __async(this, null, function* () {\n      const upload = yield this.spheronApi.getUpload(uploadId);\n      return this.mapCoreUpload(upload);\n    });\n  }\n  getBucketIpnsRecords(bucketId) {\n    return __async(this, null, function* () {\n      const { ipnsRecords } = yield this.spheronApi.getBucketIpnsRecords(\n        bucketId\n      );\n      return ipnsRecords.map((x) => this.mapCoreIpnsRecord(x));\n    });\n  }\n  getBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      const { ipnsRecord } = yield this.spheronApi.getBucketIpnsRecord(\n        bucketId,\n        ipnsRecordId\n      );\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  addBucketIpnsRecord(bucketId, uploadId) {\n    return __async(this, null, function* () {\n      const { ipnsRecord } = yield this.spheronApi.addBucketIpnsRecord(\n        bucketId,\n        uploadId\n      );\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  updateBucketIpnsRecord(bucketId, ipnsRecordId, uploadId) {\n    return __async(this, null, function* () {\n      const { ipnsRecord } = yield this.spheronApi.patchBucketIpnsRecord(\n        bucketId,\n        ipnsRecordId,\n        uploadId\n      );\n      return this.mapCoreIpnsRecord(ipnsRecord);\n    });\n  }\n  deleteBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.spheronApi.deleteBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  mapCoreBucket(bucket) {\n    return {\n      id: bucket._id,\n      name: bucket.name,\n      organizationId: bucket.organization,\n      state: bucket.state\n    };\n  }\n  mapCoreBucketDomains(domain) {\n    return {\n      id: domain._id,\n      name: domain.name,\n      link: domain.link,\n      verified: domain.verified,\n      bucketId: domain.bucketId,\n      type: domain.type\n    };\n  }\n  mapCoreUpload(upload) {\n    return {\n      id: upload._id,\n      protocolLink: upload.protocolLink,\n      uploadDirectory: upload.uploadDirectory,\n      status: upload.status,\n      memoryUsed: upload.memoryUsed,\n      bucketId: upload.bucket,\n      protocol: upload.protocol\n    };\n  }\n  mapCoreIpnsRecord(ipnsRecord) {\n    return {\n      id: ipnsRecord._id,\n      ipnsHash: ipnsRecord.keyId,\n      ipnsLink: ipnsRecord.ipnsLink,\n      bucketId: ipnsRecord.bucket,\n      createdAt: ipnsRecord.createdAt,\n      updatedAt: ipnsRecord.updatedAt,\n      memoryUsed: ipnsRecord.memoryUsed\n    };\n  }\n};\nvar bucket_manager_default = BucketManager;\n\n// src/index.ts\nvar import_core3 = require(\"@spheron/core\");\n\n// src/fs-payload-creator.ts\nvar import_fs = __toESM(require(\"fs\"));\nvar import_form_data = __toESM(require(\"form-data\"));\nvar import_path = __toESM(require(\"path\"));\nvar createPayloads = (path2, payloadSize) => __async(void 0, null, function* () {\n  const uploadContext = {\n    payloads: new Array(),\n    currentPayload: null,\n    currentPayloadSize: 0,\n    totalSize: 0\n  };\n  yield fillUploadContext(path2, \"./\", uploadContext, true, payloadSize);\n  if (uploadContext.currentPayload) {\n    uploadContext.payloads.push(uploadContext.currentPayload);\n  }\n  return {\n    payloads: uploadContext.payloads,\n    totalSize: uploadContext.totalSize\n  };\n});\nvar fillUploadContext = (pathToFile, rootPath, uploadContext, isRoot, payloadSize) => __async(void 0, null, function* () {\n  const stat = yield import_fs.default.promises.stat(pathToFile);\n  if (stat.isFile()) {\n    const fileName = import_path.default.basename(pathToFile);\n    processFile(\n      pathToFile,\n      rootPath + fileName,\n      stat,\n      uploadContext,\n      payloadSize\n    );\n    return;\n  }\n  const files = yield import_fs.default.promises.readdir(pathToFile);\n  for (const file of files) {\n    yield fillUploadContext(\n      `${pathToFile}/${file}`,\n      isRoot ? \"./\" : `${rootPath}${import_path.default.basename(pathToFile)}/`,\n      uploadContext,\n      false,\n      payloadSize\n    );\n  }\n});\nvar processFile = (fullPath, uploadPath, stat, uploadContext, payloadSize) => __async(void 0, null, function* () {\n  uploadContext.totalSize += stat.size;\n  if (stat.size > payloadSize) {\n    const numOfChunks = Math.ceil(stat.size / payloadSize);\n    for (let i = 0; i < numOfChunks; i++) {\n      const start = i * payloadSize;\n      const end = start + payloadSize - 1;\n      const form = new import_form_data.default();\n      form.append(\n        `chunk-${i}-${numOfChunks}`,\n        import_fs.default.createReadStream(fullPath, { start, end }),\n        {\n          filepath: uploadPath\n        }\n      );\n      uploadContext.payloads.push(form);\n    }\n  } else {\n    if (!uploadContext.currentPayload) {\n      uploadContext.currentPayload = new import_form_data.default();\n    }\n    uploadContext.currentPayload.append(\n      \"files\",\n      import_fs.default.createReadStream(fullPath),\n      {\n        filepath: uploadPath\n      }\n    );\n    uploadContext.currentPayloadSize += stat.size;\n    if (uploadContext.currentPayloadSize > payloadSize) {\n      uploadContext.payloads.push(uploadContext.currentPayload);\n      uploadContext.currentPayload = null;\n      uploadContext.currentPayloadSize = 0;\n    }\n  }\n});\n\n// src/ipfs.utils.ts\nvar import_cid = require(\"multiformats/cid\");\nvar ipfs = {\n  utils: {\n    toV0: (v1) => {\n      const cid = import_cid.CID.parse(v1);\n      if (cid.version === 0)\n        return v1;\n      return cid.toV0().toString();\n    },\n    toV1: (v0) => {\n      const cid = import_cid.CID.parse(v0);\n      if (cid.version === 1)\n        return v0;\n      return cid.toV1().toString();\n    }\n  }\n};\n\n// src/index.ts\nvar import_encryption = require(\"@spheron/encryption\");\n\n// src/utils.ts\nvar import_fs2 = __toESM(require(\"fs\"));\nfunction readFileContent(filePath) {\n  return __async(this, null, function* () {\n    const exists = import_fs2.default.promises.access(filePath, import_fs2.default.constants.F_OK);\n    if (!exists) {\n      throw new Error(\"File does not exist.\");\n    }\n    const fileBuffer = yield import_fs2.default.promises.readFile(filePath);\n    const fileContent = new Uint8Array(fileBuffer);\n    return {\n      content: fileContent\n    };\n  });\n}\n\n// src/index.ts\nvar import_form_data2 = __toESM(require(\"form-data\"));\nvar SpheronClient = class extends import_core3.ScopeExtractor {\n  constructor(configuration) {\n    const spheronApi = new import_core3.SpheronApi(\n      configuration.token,\n      configuration == null ? void 0 : configuration.apiUrl\n    );\n    super(spheronApi);\n    this.spheronApi = spheronApi;\n    this.configuration = configuration;\n    this.bucketManager = new bucket_manager_default(this.spheronApi);\n    this.uploadManager = new import_core3.UploadManager(configuration == null ? void 0 : configuration.apiUrl);\n  }\n  upload(path2, configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const { uploadId, payloadSize, parallelUploadCount } = yield this.uploadManager.initiateUpload({\n        protocol: configuration.protocol,\n        name: configuration.name,\n        organizationId: configuration.organizationId,\n        token: this.configuration.token\n      });\n      let success = true;\n      let caughtError = void 0;\n      try {\n        const { payloads, totalSize } = yield createPayloads(path2, payloadSize);\n        configuration.onUploadInitiated && configuration.onUploadInitiated(uploadId);\n        const uploadPayloadsResult = yield this.uploadManager.uploadPayloads(\n          payloads,\n          {\n            uploadId,\n            token: this.configuration.token,\n            parallelUploadCount,\n            onChunkUploaded: (uploadedSize) => configuration.onChunkUploaded && configuration.onChunkUploaded(uploadedSize, totalSize)\n          }\n        );\n        if (!uploadPayloadsResult.success) {\n          throw new Error(uploadPayloadsResult.errorMessage);\n        }\n      } catch (error) {\n        success = false;\n        caughtError = error;\n      }\n      const result = yield this.uploadManager.finalizeUpload(\n        uploadId,\n        success,\n        this.configuration.token\n      );\n      if (caughtError) {\n        throw caughtError;\n      }\n      if (!result.success) {\n        throw new Error(`Upload failed. ${result.message}`);\n      }\n      return {\n        uploadId: result.uploadId,\n        bucketId: result.bucketId,\n        protocolLink: result.protocolLink,\n        dynamicLinks: result.dynamicLinks,\n        cid: result.cid\n      };\n    });\n  }\n  encryptUpload(_0) {\n    return __async(this, arguments, function* ({\n      authSig,\n      sessionSigs,\n      accessControlConditions,\n      evmContractConditions,\n      solRpcConditions,\n      unifiedAccessControlConditions,\n      chain,\n      string,\n      filePath,\n      litNodeClient,\n      configuration\n    }) {\n      yield this.validateStorageOrganizationType();\n      if (!string && !filePath) {\n        throw new Error(`Either string or filePath must be provided`);\n      }\n      if (!configuration.name) {\n        throw new Error(`Name must be provided`);\n      }\n      let dataToEncrypt = null;\n      if (string && filePath) {\n        throw new Error(`Provide only either a string or filePath to encrypt`);\n      } else if (string !== void 0) {\n        dataToEncrypt = (0, import_encryption.uint8arrayFromString)(string, \"utf8\");\n      } else if (filePath !== void 0) {\n        const { content } = yield readFileContent(filePath);\n        dataToEncrypt = content;\n      } else {\n        throw new Error(`Either string or file must be provided`);\n      }\n      if (!dataToEncrypt) {\n        throw new Error(`No data to encrypt`);\n      }\n      const { encryptedData, symmetricKey } = yield (0, import_encryption.encryptData)(dataToEncrypt);\n      const encryptedSymmetricKey = yield litNodeClient.saveEncryptionKey({\n        accessControlConditions,\n        evmContractConditions,\n        solRpcConditions,\n        unifiedAccessControlConditions,\n        symmetricKey,\n        authSig,\n        sessionSigs,\n        chain\n      });\n      const encryptedSymmetricKeyString = (0, import_encryption.uint8arrayToString)(\n        encryptedSymmetricKey,\n        \"base16\"\n      );\n      const encryptedDataJson = Buffer.from(encryptedData.buffer).toJSON();\n      try {\n        const uploadJson = JSON.stringify({\n          encryptedData: encryptedDataJson,\n          encryptedSymmetricKeyString,\n          accessControlConditions,\n          evmContractConditions,\n          solRpcConditions,\n          unifiedAccessControlConditions,\n          chain\n        });\n        const { uploadId, parallelUploadCount } = yield this.uploadManager.initiateUpload({\n          protocol: import_core3.ProtocolEnum.IPFS,\n          name: configuration.name,\n          token: this.configuration.token\n        });\n        configuration.onUploadInitiated && configuration.onUploadInitiated(uploadId);\n        let success = true;\n        let caughtError = void 0;\n        const totalSize = Buffer.byteLength(uploadJson, \"utf8\");\n        try {\n          const form = new import_form_data2.default();\n          form.append(\"files\", uploadJson, \"data.json\");\n          const uploadPayloadsResult = yield this.uploadManager.uploadPayloads(\n            [form],\n            {\n              uploadId,\n              token: this.configuration.token,\n              parallelUploadCount,\n              onChunkUploaded: (uploadedSize) => configuration.onChunkUploaded && configuration.onChunkUploaded(uploadedSize, totalSize)\n            }\n          );\n          if (!uploadPayloadsResult.success) {\n            throw new Error(uploadPayloadsResult.errorMessage);\n          }\n        } catch (error) {\n          success = false;\n          caughtError = error;\n        }\n        const result = yield this.uploadManager.finalizeUpload(\n          uploadId,\n          success,\n          this.configuration.token\n        );\n        if (caughtError) {\n          throw caughtError;\n        }\n        if (!result.success) {\n          throw new Error(`Upload failed. ${result.message}`);\n        }\n        return {\n          uploadId: result.uploadId,\n          bucketId: result.bucketId,\n          protocolLink: result.protocolLink,\n          dynamicLinks: result.dynamicLinks,\n          cid: result.cid\n        };\n      } catch (e) {\n        throw new Error(`Upload failed: ${e.message}`);\n      }\n    });\n  }\n  decryptUpload(_0) {\n    return __async(this, arguments, function* ({\n      authSig,\n      sessionSigs,\n      ipfsCid,\n      litNodeClient\n    }) {\n      yield this.validateStorageOrganizationType();\n      const metadata = yield (yield fetch(`https://${ipfsCid}.ipfs.sphn.link/data.json`).catch(() => {\n        throw new Error(\"Error finding metadata from IPFS CID\");\n      })).json();\n      const symmetricKey = yield litNodeClient.getEncryptionKey({\n        accessControlConditions: metadata.accessControlConditions,\n        evmContractConditions: metadata.evmContractConditions,\n        solRpcConditions: metadata.solRpcConditions,\n        unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,\n        toDecrypt: metadata.encryptedSymmetricKeyString,\n        chain: metadata.chain,\n        authSig,\n        sessionSigs\n      });\n      const encrypted = new Uint8Array(Buffer.from(metadata.encryptedData));\n      return (0, import_encryption.decryptData)(encrypted, symmetricKey);\n    });\n  }\n  createSingleUploadToken(configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const { singleUseToken } = yield this.uploadManager.initiateUpload({\n        protocol: configuration.protocol,\n        name: configuration.name,\n        token: this.configuration.token,\n        createSingleUseToken: true\n      });\n      return { uploadToken: singleUseToken };\n    });\n  }\n  pinCID(configuration) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.uploadManager.pinCID({\n        name: configuration.name,\n        token: this.configuration.token,\n        cid: configuration.cid\n      });\n    });\n  }\n  getOrganizationBuckets(organizationId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getOrganizationBuckets(\n        organizationId,\n        options\n      );\n    });\n  }\n  getOrganizationBucketCount(organizationId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getOrganizationBucketCount(\n        organizationId,\n        options\n      );\n    });\n  }\n  getBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucket(bucketId);\n    });\n  }\n  getCIDStatus(CID2) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.uploadManager.getCIDStatus(CID2);\n    });\n  }\n  getBucketDomains(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketDomains(bucketId);\n    });\n  }\n  getBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketDomain(bucketId, domainIdentifier);\n    });\n  }\n  addBucketDomain(bucketId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.addBucketDomain(bucketId, options);\n    });\n  }\n  updateBucketDomain(bucketId, domainIdentifier, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.updateBucketDomain(\n        bucketId,\n        domainIdentifier,\n        options\n      );\n    });\n  }\n  verifyBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.verifyBucketDomain(\n        bucketId,\n        domainIdentifier\n      );\n    });\n  }\n  getCdnDnsRecords() {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      const { recordIpv4V2, recordCnameV2 } = yield this.spheronApi.getCdnRecords();\n      return {\n        cdnARecords: recordIpv4V2,\n        cdnCnameRecords: recordCnameV2\n      };\n    });\n  }\n  deleteBucketDomain(bucketId, domainIdentifier) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.deleteBucketDomain(\n        bucketId,\n        domainIdentifier\n      );\n    });\n  }\n  archiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.bucketManager.archiveBucket(bucketId);\n    });\n  }\n  unarchiveBucket(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.bucketManager.unarchiveBucket(bucketId);\n    });\n  }\n  getBucketUploadCount(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketUploadCount(bucketId);\n    });\n  }\n  getBucketUploads(bucketId, options) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketUploads(bucketId, options);\n    });\n  }\n  getUpload(uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getUpload(uploadId);\n    });\n  }\n  getOrganizationUsage(organizationId) {\n    return __async(this, null, function* () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;\n      yield this.validateStorageOrganizationType();\n      const usage = yield this.spheronApi.getOrganizationUsage(\n        organizationId,\n        \"storage\"\n      );\n      return {\n        used: {\n          bandwidth: (_a = usage.usedBandwidth) != null ? _a : 0,\n          storageArweave: (_b = usage.usedStorageArweave) != null ? _b : 0,\n          storageIPFS: (_c = usage.usedStorageIPFS) != null ? _c : 0,\n          storageFilecoin: (_d = usage.usedStorageFilecoin) != null ? _d : 0,\n          domains: (_e = usage.usedDomains) != null ? _e : 0,\n          hnsDomains: (_f = usage.usedHnsDomains) != null ? _f : 0,\n          ensDomains: (_g = usage.usedEnsDomains) != null ? _g : 0,\n          numberOfRequests: (_h = usage.usedNumberOfRequests) != null ? _h : 0,\n          parallelUploads: (_i = usage.usedParallelUploads) != null ? _i : 0,\n          imageOptimization: (_j = usage.usedImageOptimizations) != null ? _j : 0,\n          ipfsBandwidth: (_k = usage.usedIpfsBandwidth) != null ? _k : 0,\n          ipfsNumberOfRequests: (_l = usage.usedIpfsNumberOfRequests) != null ? _l : 0\n        },\n        limit: {\n          bandwidth: (_m = usage.bandwidthLimit) != null ? _m : 0,\n          storageArweave: (_n = usage.storageArweaveLimit) != null ? _n : 0,\n          storageIPFS: (_o = usage.storageIPFSLimit) != null ? _o : 0,\n          domains: (_p = usage.domainsLimit) != null ? _p : 0,\n          hnsDomains: (_q = usage.usedHnsDomains) != null ? _q : 0,\n          ensDomains: (_r = usage.usedEnsDomains) != null ? _r : 0,\n          parallelUploads: (_s = usage.parallelUploadsLimit) != null ? _s : 0,\n          imageOptimization: (_t = usage.imageOptimizationsLimit) != null ? _t : 0,\n          ipfsBandwidth: (_u = usage.ipfsBandwidthLimit) != null ? _u : 0\n        }\n      };\n    });\n  }\n  getTokenScope() {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.getScopeFromToken();\n    });\n  }\n  getBucketIpnsRecords(bucketId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketIpnsRecords(bucketId);\n    });\n  }\n  getBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.getBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  addBucketIpnsRecord(bucketId, uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.addBucketIpnsRecord(bucketId, uploadId);\n    });\n  }\n  updateBucketIpnsRecord(bucketId, ipnsRecordId, uploadId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.bucketManager.updateBucketIpnsRecord(\n        bucketId,\n        ipnsRecordId,\n        uploadId\n      );\n    });\n  }\n  deleteBucketIpnsRecord(bucketId, ipnsRecordId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      yield this.spheronApi.deleteBucketIpnsRecord(bucketId, ipnsRecordId);\n    });\n  }\n  migrateStaticSiteOrgToStorage(webappOrganizationId, storageOrganizationId) {\n    return __async(this, null, function* () {\n      yield this.validateStorageOrganizationType();\n      return yield this.spheronApi.migrateStaticSiteOrgToStorage(\n        webappOrganizationId,\n        storageOrganizationId\n      );\n    });\n  }\n  validateStorageOrganizationType() {\n    return __async(this, null, function* () {\n      const type = yield this.getOrganizationTypeFromToken();\n      if (type != import_core3.AppTypeEnum.STORAGE) {\n        throw new Error(\n          \"The token used won't work with version >2.0.0 of SDK, please create a new token from your storage organisation.\"\n        );\n      }\n    });\n  }\n};\nvar src_default = SpheronClient;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  BucketStateEnum,\n  DomainTypeEnum,\n  ProtocolEnum,\n  SpheronClient,\n  TokenScope,\n  UploadStatusEnum,\n  ipfs,\n  uint8arrayToString\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}