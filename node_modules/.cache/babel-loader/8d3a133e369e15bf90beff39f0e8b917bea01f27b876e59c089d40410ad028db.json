{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\CryptograpicFarming\\\\cryptographicfarming\\\\src\\\\address.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAddress, abi } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction YourComponent() {\n  _s();\n  useEffect(() => {\n    async function getAddress() {\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n          // Request Ethereum account access\n          const accounts = await provider.send(\"eth_requestAccounts\", []);\n          console.log(\"Connected Ethereum Accounts:\", accounts);\n\n          // Get the signer\n          const signer = provider.getSigner();\n\n          // Create a contract instance\n          const contract = new ethers.Contract(contractAddress, abi, signer);\n\n          // Call the `decider` function with your Ethereum address as an argument\n          const result = await contract.decider(\"0xa2BFA8d4274e182d186EB19F3B047D5749039620\");\n          console.log(\"Result from decider function:\", result);\n        } else {\n          console.log(\"Install MetaMask or enable it.\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n\n    // Call getAddress when the component mounts\n    getAddress();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(YourComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","ethers","contractAddress","abi","jsxDEV","_jsxDEV","YourComponent","_s","getAddress","window","ethereum","provider","providers","Web3Provider","accounts","send","console","log","signer","getSigner","contract","Contract","result","decider","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/CryptograpicFarming/cryptographicfarming/src/address.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { contractAddress, abi } from \"./constants\";\r\n\r\nfunction YourComponent() {\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      try {\r\n        if (typeof window.ethereum !== \"undefined\") {\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          \r\n          // Request Ethereum account access\r\n          const accounts = await provider.send(\"eth_requestAccounts\", []);\r\n          console.log(\"Connected Ethereum Accounts:\", accounts);\r\n\r\n          // Get the signer\r\n          const signer = provider.getSigner();\r\n\r\n          // Create a contract instance\r\n          const contract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n          // Call the `decider` function with your Ethereum address as an argument\r\n          const result = await contract.decider(\"0xa2BFA8d4274e182d186EB19F3B047D5749039620\");\r\n\r\n          console.log(\"Result from decider function:\", result);\r\n        } else {\r\n          console.log(\"Install MetaMask or enable it.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    }\r\n\r\n    // Call getAddress when the component mounts\r\n    getAddress();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Your component's content */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YourComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,eAAe,EAAEC,GAAG,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvBP,SAAS,CAAC,MAAM;IACd,eAAeQ,UAAUA,CAAA,EAAG;MAC1B,IAAI;QACF,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;UAC1C,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;;UAEnE;UACA,MAAMI,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;UAC/DC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;;UAErD;UACA,MAAMI,MAAM,GAAGP,QAAQ,CAACQ,SAAS,CAAC,CAAC;;UAEnC;UACA,MAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACoB,QAAQ,CAACnB,eAAe,EAAEC,GAAG,EAAEe,MAAM,CAAC;;UAElE;UACA,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,OAAO,CAAC,4CAA4C,CAAC;UAEnFP,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEK,MAAM,CAAC;QACtD,CAAC,MAAM;UACLN,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;;IAEA;IACAhB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEH,OAAA;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV;AAACrB,EAAA,CAtCQD,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAwCtB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}