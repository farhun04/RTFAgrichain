{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\CryptograpicFarming\\\\cryptographicfarming\\\\src\\\\Screen.js\";\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { contractAddress, abi } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function Screen() {\n  console.log(\"a\");\n  if (typeof window.ethereum !== \"undefined\") {\n    const ethers = require(\"ethers\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const m = localStorage.getItem(\"funding\");\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n    try {\n      const transactionResponse = await contract.deposit({\n        value: ethers.utils.parseEther(m)\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Screen\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = Screen;\nexport default Screen;\nvar _c;\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"names":["React","ethers","contractAddress","abi","jsxDEV","_jsxDEV","Screen","console","log","window","ethereum","require","provider","providers","Web3Provider","signer","getSigner","m","localStorage","getItem","contract","Contract","transactionResponse","deposit","value","utils","parseEther","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/CryptograpicFarming/cryptographicfarming/src/Screen.js"],"sourcesContent":["import React from 'react'\r\nimport {ethers} from 'ethers'\r\nimport { contractAddress,abi } from \"./constants\";\r\n\r\n async function Screen() {\r\n    console.log(\"a\")\r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      const ethers = require(\"ethers\")\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const signer = provider.getSigner()\r\n      const m=localStorage.getItem(\"funding\");\r\n      const contract = new ethers.Contract(contractAddress, abi, signer)\r\n      try {\r\n        const transactionResponse = await contract.deposit({value:ethers.utils.parseEther(m)}\r\n          \r\n        )\r\n        \r\n      } catch (error) {\r\n        console.log(error)\r\n      }}\r\n  return (\r\n    <div>Screen</div>\r\n    \r\n  )\r\n}\r\nexport default Screen"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,QAAO,QAAQ;AAC7B,SAASC,eAAe,EAACC,GAAG,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,eAAeC,MAAMA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC1C,MAAMT,MAAM,GAAGU,OAAO,CAAC,QAAQ,CAAC;IAChC,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;IACnC,MAAMC,CAAC,GAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IACvC,MAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACoB,QAAQ,CAACnB,eAAe,EAAEC,GAAG,EAAEY,MAAM,CAAC;IAClE,IAAI;MACF,MAAMO,mBAAmB,GAAG,MAAMF,QAAQ,CAACG,OAAO,CAAC;QAACC,KAAK,EAACvB,MAAM,CAACwB,KAAK,CAACC,UAAU,CAACT,CAAC;MAAC,CAEpF,CAAC;IAEH,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdpB,OAAO,CAACC,GAAG,CAACmB,KAAK,CAAC;IACpB;EAAC;EACL,oBACEtB,OAAA;IAAAuB,QAAA,EAAK;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAGrB;AAACC,EAAA,GApBe3B,MAAM;AAqBtB,eAAeA,MAAM;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}