{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\OneDrive\\\\Desktop\\\\CryptograpicFarming\\\\cryptographicfarming\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { AiOutlineSend } from 'react-icons/ai';\nimport './Chatbot.css'; // Assuming you will create a separate CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState('');\n  const handleSend = async () => {\n    if (!query) return;\n    const userMessage = {\n      text: query,\n      sender: 'user'\n    };\n    setMessages([...messages, userMessage]);\n    setQuery('');\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: \"gpt-3.5-turbo\",\n        // You can use newer or specific models as needed\n        messages: [{\n          role: \"user\",\n          content: query\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer 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`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const botMessage = {\n        text: response.data.choices[0].message.content,\n        sender: 'bot'\n      };\n      setMessages([...messages, userMessage, botMessage]);\n    } catch (error) {\n      console.error('Error while fetching response from OpenAI:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask something...\",\n        onKeyPress: event => event.key === 'Enter' && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: /*#__PURE__*/_jsxDEV(AiOutlineSend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"AEAdGqu8P7SWDUKG2QaKu5PAH3Y=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","AiOutlineSend","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","query","setQuery","handleSend","userMessage","text","sender","response","post","model","role","content","headers","botMessage","data","choices","message","error","console","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyPress","event","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/moham/OneDrive/Desktop/CryptograpicFarming/cryptographicfarming/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { AiOutlineSend } from 'react-icons/ai';\r\nimport './Chatbot.css';  // Assuming you will create a separate CSS file for styling\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleSend = async () => {\r\n    if (!query) return;\r\n    const userMessage = { text: query, sender: 'user' };\r\n    setMessages([...messages, userMessage]);\r\n    setQuery('');\r\n\r\n    try {\r\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\r\n        model: \"gpt-3.5-turbo\",  // You can use newer or specific models as needed\r\n        messages: [{ role: \"user\", content: query }],\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer 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`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const botMessage = { text: response.data.choices[0].message.content, sender: 'bot' };\r\n      setMessages([...messages, userMessage, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error while fetching response from OpenAI:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"messages-container\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"Ask something...\"\r\n          onKeyPress={event => event.key === 'Enter' && handleSend()}\r\n        />\r\n        <button onClick={handleSend}><AiOutlineSend /></button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}